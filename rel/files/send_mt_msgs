#!/bin/bash

UrlFmt="http://{{HOST}}:{{PORT}}/cgi-bin/sendsms?username={{USERNAME}}&password={{PASSWORD}}&from={{FROM}}&to={{TO}}&text={{BODY}}&dlr-mask={{DRLMASK}}"
Host=localhost
Port=13003 # 13003 postpaid, 13004 prepaid
Username=test
Password=test
DlrMask=0
Count=0
Same=0
SameTo=0
Length=160
Networks=(37529 37533 37544 37525)

function usage() {
   echo "Usage: $(basename $0) <-c Count> [-f From] [-t To] [-b Body] [-l Length] [-s] [-d Dlr] [-H Host] [-P Port] [-u User] [-p Password]"
   echo "Where -c Message Count. Mandatory option"
   echo "      -f Source address. By default is empty"
   echo "      -t Destination address. By default is randomly generated using networks: '${Networks[@]}'"
   echo "      -b Message Body. By default is randomly generated"
   echo "      -l Randomly generated message body Length. Default is '$Length'"
   echo "      -s Same randomly generated body for all messages"
   echo "      -d Delivery report mask. Default is '$DlrMask'"
   echo "      -H Kannel's bearerbox-host Host name. Default is '$Host'"
   echo "      -P Kannel's smsbox-port Port number. Default is '$Port'"
   echo "      -u Kannel's sendsms-user User name. Default is '$Username'"
   echo "      -p Kannel's sendsms-user Password. Default is '$Password'"
   echo "      -q Quiet mode"
   echo "      -h Help"
   echo
   echo "Delivery report mask is the addition of the delivery report numbers:"
   echo "  1: delivery success"
   echo "  2: delivery failure"
   echo "  4: message buffered"
   echo "  8: smsc submit"
   echo " 16: smsc reject"
   echo "Example: 31 = 1+2+4+8+16"
}

# fix provided From address.
function get_source_address() {
    if [ -z $From ]; then
        echo
    else
        echo %2B${From#+}
    fi
}

# generate random To address or use provided.
function get_destination_address() {
    if [ $SameTo -eq 1 ]; then
        ## remove leading '+'.
        echo %2B${To#+}
    else
        ## select random network.
        LastNetworkIndex=$((${#Networks[@]}-1))
        RandomNetworkIndex=$(shuf -i 0-$LastNetworkIndex -n 1)
        Network=${Networks[$RandomNetworkIndex]}
        ## select random 7 digits number.
        Number=$(shuf -i 1111111-9999999 -n 1)
        echo %2B$Network$Number
    fi
}

# generate random $Length chars sequence.
function generate_random_body() {
    cat /dev/urandom | tr -dc '0-9a-zA-Z' | head -c $Length
}

# generate random Body or use provided.
function get_body() {
    if [ $Same -eq 1 ]; then
        ## if body is not yet set - generate random once
        if [ -z $Body ]; then
            Body=$(generate_random_body)
        fi
    else
        Body=$(generate_random_body)
    fi
    echo "$Body"
}

# parse arguments.
while getopts c:f:t:b:l:sd:H:P:u:p:qh opt; do
    case "$opt" in
        c) Count="$OPTARG";;
        f) From="$OPTARG";;
        t) To="$OPTARG"; SameTo=1;;
        b) Body="$OPTARG"; Same=1;;
        l) Length="$OPTARG";;
        s) Same=1;;
        d) DlrMask="$OPTARG";;
        H) Host="$OPTARG";;
        P) Port="$OPTARG";;
        u) Username="$OPTARG";;
        p) Password="$OPTARG";;
        q) Quiet="-q";;
        \? | h) usage; exit 0;
    esac
done

# check that the mandatory option is set.
if [ $Count -eq 0 ]; then
    usage
    exit 1
fi

Index=1
while [ $Index -lt $Count ] || [ $Index -eq $Count ]; do
    if [ -z $Quiet ]; then
        printf "#%s\n" $Index
    fi

    From=$(get_source_address)
    To=$(get_destination_address)
    Body=$(get_body)

    ## build sed patterns list.
    Patterns="s/{{HOST}}/$Host/;s/{{PORT}}/$Port/;s/{{USERNAME}}/$Username/;s/{{PASSWORD}}/$Password/;s/{{FROM}}/$From/;s/{{TO}}/$To/;s/{{BODY}}/$Body/;s/{{DRLMASK}}/$DlrMask/"
    ## build the url.
    Url=$(echo $UrlFmt | sed -e $Patterns)
    wget $Url $Quiet -O /dev/null
    if [ -z $Quiet ]; then
        echo; echo
    fi

    Index=$(($Index + 1))
done

exit 0
