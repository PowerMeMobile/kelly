#!/bin/bash

UrlFmt="http://{{HOST}}:{{PORT}}/inject_mo?short_message={{TEXT}}&source_addr={{SRC_ADDR}}&&source_addr_ton={{SRC_TON}}&source_addr_npi={{SRC_NPI}}&destination_addr={{DST_ADDR}}&dest_addr_ton={{DST_TON}}&dest_addr_npi={{DST_NPI}}"
## service_type=&esm_class=0&protocol_ID=&registered_delivery_flag=0&data_coding=0
Host=127.0.0.1
Port=8071
Count=1
Same=0
Length=140

function usage() {
   echo "Usage: $(basename $0) [-H host] [-P port] -s SOURCE -d DESTINATION [-b body] [-l Length] [-c Count]"
   echo "  -H SMPPSim's host name [default: '$Host']"
   echo "  -P SMPPSim's port  [default: '$Port']"
   echo "  -s SMS source address Addr[:Len=0][,Ton=1,Npi=1]"
   echo "  -d SMS destination address Addr[:Len=0][,Ton=1,Npi,1]"
   echo "  -b SMS body, randomly generated by default"
   echo "  -l Randomly generated body length [default: 140]"
   echo "  -c Count of SMS to send with given or random body [default: 1]"
   echo "  -q Quiet mode [default: 0]"
   echo "  -h Help"
}

function generate_random_text() {
    local length=$1
    cat /dev/urandom | tr -dc '0-9a-zA-Z' | head -c $length
}

function addr() {
    echo "$1," | cut -d, -s -f1
}

function ton() {
    echo "$1," | cut -d, -s -f2
}

function npi() {
    echo "$1," | cut -d, -s -f3
}

if [[ $# -eq 0 ]]; then
    usage
    exit 1
fi

# parse arguments
while getopts H:P:s:d:b:l:c:qh opt; do
    case "$opt" in
        H) Host="$OPTARG";;
        P) Port="$OPTARG";;
        s) Source="$OPTARG";;
        d) Destination="$OPTARG";;
        b) Text="$OPTARG"; Same=1;;
        l) Length="$OPTARG";;
        c) Count="$OPTARG";;
        q) Quiet="-q";;
        \? | h) usage; exit 0;
    esac
done

SrcAddr=`addr $Source`
SrcTon=`ton $Source`
SrcNpi=`npi $Source`

if [[ -z $SrcAddr ]]; then
    echo "Source address is not provided"
    exit 1
fi

DstAddr=`addr $Destination`
DstTon=`ton $Destination`
DstNpi=`npi $Destination`

if [[ -z $DstAddr ]]; then
    echo "Destination address is not provided"
    exit 1
fi

# generate random text message used for all messages
if [[ $Same -eq 1 ]] && [[ -z "$Text" ]]; then
    Text=$(generate_random_text $Length)
fi

Index=1
LastNetworkIndex=$((${#Networks[@]}-1))
while [[ $Index -le $Count ]]; do
    if [[ -z $Quiet ]]; then
        printf "#%s\n" $Index
    fi

    ## if not the same message, then generate it every time
    if [[ $Same -eq 0 ]]; then
        Text=$(generate_random_text $Length)
    fi
    ## build sed patterns list.
    Patterns="s/{{HOST}}/$Host/;s/{{PORT}}/$Port/;s/{{TEXT}}/$Text/;s/{{SRC_ADDR}}/$SrcAddr/;s/{{SRC_TON}}/${SrcTon:-1}/;s/{{SRC_NPI}}/${SrcNpi:-1}/;s/{{DST_ADDR}}/$DstAddr/;s/{{DST_TON}}/${DstTon:-1}/;s/{{DST_NPI}}/${DstNpi:-1}/"
    ## build the url.
    Url=$(echo $UrlFmt | sed -e $Patterns)
    wget $Url $Quiet -O /dev/null
    if [[ $? -ne 0 ]]; then
        echo "SMPPSim is unavailable at $Host:$Port"
        exit 1
    fi
    if [[ -z $Quiet ]]; then
        echo; echo
    fi

    Index=$(($Index + 1))
done

exit 0
